{"version":3,"sources":["components/MyEditor.tsx","components/GitHubButton.tsx","components/TerminateButton.tsx","components/TopRow.tsx","components/EditorHelp.tsx","components/DelayedNotRunning.tsx","App.tsx","index.tsx"],"names":["MyEditor","props","height","options","wordWrap","formatOnPaste","formatOnType","minimap","enabled","stablePeek","suggest","insertMode","preview","language","value","onChange","onMount","editor","monaco","modelUri","Uri","parse","model","createModel","languages","json","jsonDefaults","setDiagnosticsOptions","validate","schemaValidation","schemas","uri","schema","JSON","fileMatch","toString","setModel","addCommand","KeyCode","F1","console","log","F2","trigger","toast","overrideServices","storageService","get","getNumber","getBoolean","key","remove","store","onDidChangeStorage","onWillSaveState","GitHubButton","style","background","border","margin","padding","display","flexDirection","alignItems","justifyContent","cursor","fontSize","onClick","window","__openLink__","alt","src","width","TerminateButton","__terminate__","close","TopRow","version","EditorHelp","marginTop","marginLeft","DelayedNotRunning","useTimeout","delay","isReady","position","color","backgroundColor","Fragment","App","useAsync","__getVersion__","useAsyncFn","__ping__","pingState","requestPing","schemaState","__getSchema__","useState","jsonValue","setJsonValue","setEditor","useInterval","loading","addEventListener","e","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d0b176b.chunk.js","sourcesContent":["import React from \"react\";\nimport Editor, { OnMount } from \"@monaco-editor/react\";\nimport { editor } from \"monaco-editor\";\nimport toast from \"react-simple-toasts\";\n\ninterface Props {\n  value?: string;\n  onChange: (v?: string) => void;\n  onMount: (e: editor.IStandaloneCodeEditor) => void;\n  schema: string;\n}\n\nexport default function MyEditor(props: Props): JSX.Element {\n  const onMount: OnMount = (editor, monaco) => {\n    const modelUri = monaco.Uri.parse(\"a://b/foo.json\");\n    const model = monaco.editor.createModel(\"\", \"json\", modelUri);\n    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      schemaValidation: \"error\",\n      schemas: [\n        {\n          uri: \"a://b/foo.json\",\n          schema: JSON.parse(props.schema),\n          fileMatch: [modelUri.toString()],\n        },\n      ],\n    });\n    editor.setModel(model);\n    props.onMount(editor);\n    editor.addCommand(monaco.KeyCode.F1, () => {\n      console.log(\"F1!!\");\n    });\n    editor.addCommand(monaco.KeyCode.F2, () => {\n      editor.trigger(\"anyString\", \"editor.action.formatDocument\", null);\n      toast(\"Saved.\");\n    });\n  };\n\n  return (\n    <Editor\n      height=\"80vh\"\n      options={{\n        wordWrap: \"off\",\n        formatOnPaste: true,\n        formatOnType: true,\n        minimap: { enabled: false },\n        stablePeek: true,\n        suggest: {\n          insertMode: \"replace\",\n          preview: true,\n        },\n      }}\n      language=\"json\"\n      value={props.value}\n      onChange={props.onChange}\n      onMount={onMount}\n      overrideServices={{\n        storageService: {\n          get() {},\n          getNumber() {},\n          getBoolean(key: any) {\n            return key === \"expandSuggestionDocs\";\n          },\n          remove() {},\n          store() {},\n          onDidChangeStorage() {},\n          onWillSaveState() {},\n        },\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function GitHubButton(props: Props): JSX.Element {\n  const onClick = () => {\n    window.__openLink__(\"https://github.com/wirekang/mouseable\");\n  };\n\n  return (\n    <a\n      style={{\n        background: \"none\",\n        border: \"none\",\n        margin: 0,\n        padding: 3,\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        cursor: \"pointer\",\n        fontSize: 13,\n      }}\n      onClick={onClick}\n    >\n      <img alt=\"github\" src=\"github.png\" width={50} height={20} />\n    </a>\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function TerminateButton(props: Props): JSX.Element {\n  const onClick = () => {\n    window.__terminate__();\n    window.close();\n  };\n  return (\n    <div style={{ fontSize: 10 }}>\n      You can close this window safely.\n      <button style={{ fontSize: 12 }} onClick={onClick}>\n        Terminate Program\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GitHubButton from \"./GitHubButton\";\nimport TerminateButton from \"./TerminateButton\";\n\ninterface Props {\n  version: string;\n}\n\nexport default function TopRow(props: Props): JSX.Element {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        margin: 3,\n      }}\n    >\n      <span>Version: {props.version}</span>\n      <GitHubButton />\n      <TerminateButton />\n    </div>\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function EditorHelp(props: Props): JSX.Element {\n  return (\n    <div\n      style={{\n        fontSize: 12,\n        marginTop: 10,\n        marginLeft: 10,\n      }}\n    >\n      <ul>\n        <li>Press Ctrl-I to show suggestions.</li>\n        <li>Press F1 to insert key.</li>\n        <li>Press F2 to save.</li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useTimeout } from \"react-use\";\n\ninterface Props {\n  delay: number;\n}\n\nexport default function DelayedNotRunning(props: Props): JSX.Element {\n  const [isReady] = useTimeout(props.delay);\n  if (isReady()) {\n    return (\n      <h2\n        style={{\n          position: \"absolute\",\n          color: \"red\",\n          width: \"100vw\",\n          height: \"100vh\",\n          backgroundColor: \"white\",\n        }}\n      >\n        Mouseable is not running.\n      </h2>\n    );\n  }\n\n  return <React.Fragment />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport MyEditor from \"./components/MyEditor\";\nimport TopRow from \"./components/TopRow\";\nimport { editor } from \"monaco-editor\";\nimport EditorHelp from \"./components/EditorHelp\";\nimport { useAsync, useAsyncFn, useInterval } from \"react-use\";\nimport DelayedNotRunning from \"./components/DelayedNotRunning\";\n\nfunction App() {\n  const versionState = useAsync(window.__getVersion__);\n  const [pingState, requestPing] = useAsyncFn(window.__ping__);\n  const schemaState = useAsync(window.__getSchema__);\n  const [jsonValue, setJsonValue] = useState<string>();\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor | null>(null);\n\n  useInterval(() => {\n    requestPing();\n  }, 2000);\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      {pingState.loading && <DelayedNotRunning delay={1000} />}\n      <TopRow version={\"\"} />\n      <EditorHelp />\n      {schemaState.value && (\n        <MyEditor value={jsonValue} onChange={setJsonValue} onMount={setEditor} schema={schemaState.value} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { isDev } from \"./gobind\";\nimport toast from \"react-simple-toasts\";\n\nif (isDev) {\n  console.log(\"DEV MODE\");\n}\n\nwindow.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"F1\" || e.key === \"F2\") {\n    e.preventDefault();\n    toast(\"Please focus on the editor. (Press Tab)\");\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}