{"version":3,"sources":["util/editor.ts","components/MyEditor.tsx","components/GitHubButton.tsx","components/TerminateButton.tsx","components/TopRow.tsx","components/EditorHelp.tsx","components/DelayedNotRunning.tsx","App.tsx","index.tsx"],"names":["registerHotkeys","e","m","addCommand","KeyCode","F1","insertKey","F2","save","a","toast","time","window","__getNextKey__","key","trigger","text","__saveConfig__","getValue","MyEditor","props","height","options","formatOnPaste","formatOnType","minimap","enabled","stablePeek","suggest","preview","language","onMount","editor","monaco","modelUri","Uri","parse","model","createModel","languages","json","jsonDefaults","setDiagnosticsOptions","validate","schemaValidation","schemas","uri","schema","JSON","fileMatch","toString","setModel","overrideServices","storageService","get","getNumber","getBoolean","remove","store","onDidChangeStorage","onWillSaveState","GitHubButton","style","background","border","margin","padding","display","flexDirection","alignItems","justifyContent","cursor","fontSize","onClick","__openLink__","alt","src","width","TerminateButton","__terminate__","close","TopRow","version","EditorHelp","marginTop","marginLeft","DelayedNotRunning","useTimeout","delay","isReady","position","color","backgroundColor","Fragment","App","versionState","useAsync","__getVersion__","useAsyncFn","__ping__","pingState","requestPing","schemaState","__getSchema__","useInterval","loading","value","addEventListener","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a8368d4.chunk.js","sourcesContent":["import { editor } from \"monaco-editor\";\nimport toast from \"react-simple-toasts\";\n\nexport function registerHotkeys(e: editor.IStandaloneCodeEditor, m: any) {\n  e.addCommand(m.KeyCode.F1, () => insertKey(e));\n  e.addCommand(m.KeyCode.F2, () => save(e));\n}\n\nasync function insertKey(e: editor.IStandaloneCodeEditor) {\n  try {\n    toast(\"Press any key. You can double press, or press the Ctrl, Shift, Alt key together.\", { time: 5000 });\n    const key = await window.__getNextKey__();\n    e.trigger(\"keyboard\", \"type\", { text: `\"${key}\"` });\n  } catch (err) {\n    toast(`${err}`);\n  }\n}\n\nasync function save(e: editor.IStandaloneCodeEditor) {\n  try {\n    e.trigger(\"anyString\", \"editor.action.formatDocument\", null);\n    await window.__saveConfig__(e.getValue());\n  } catch (err) {\n    toast(`${err}`);\n  }\n}\n","import React from \"react\";\nimport Editor, { OnMount } from \"@monaco-editor/react\";\nimport { registerHotkeys } from \"../util/editor\";\n\ninterface Props {\n  schema: string;\n}\n\nexport default function MyEditor(props: Props): JSX.Element {\n  const onMount: OnMount = (editor, monaco) => {\n    const modelUri = monaco.Uri.parse(\"a://b/foo.json\");\n    const model = monaco.editor.createModel(\"\", \"json\", modelUri);\n    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      schemaValidation: \"error\",\n      schemas: [\n        {\n          uri: \"a://b/foo.json\",\n          schema: JSON.parse(props.schema),\n          fileMatch: [modelUri.toString()],\n        },\n      ],\n    });\n    editor.setModel(model);\n    registerHotkeys(editor, monaco);\n  };\n\n  return (\n    <Editor\n      height=\"80vh\"\n      options={{\n        formatOnPaste: true,\n        formatOnType: true,\n        minimap: { enabled: false },\n        stablePeek: true,\n        suggest: {\n          preview: true,\n        },\n      }}\n      language=\"json\"\n      onMount={onMount}\n      overrideServices={{\n        storageService: {\n          get() {},\n          getNumber() {},\n          getBoolean(key: any) {\n            return key === \"expandSuggestionDocs\";\n          },\n          remove() {},\n          store() {},\n          onDidChangeStorage() {},\n          onWillSaveState() {},\n        },\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function GitHubButton(props: Props): JSX.Element {\n  const onClick = () => {\n    window.__openLink__(\"https://github.com/wirekang/mouseable\");\n  };\n\n  return (\n    <a\n      style={{\n        background: \"none\",\n        border: \"none\",\n        margin: 0,\n        padding: 3,\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        cursor: \"pointer\",\n        fontSize: 13,\n      }}\n      onClick={onClick}\n    >\n      <img alt=\"github\" src=\"github.png\" width={50} height={20} />\n    </a>\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function TerminateButton(props: Props): JSX.Element {\n  const onClick = () => {\n    window.__terminate__();\n    window.close();\n  };\n  return (\n    <div style={{ fontSize: 10 }}>\n      You can close this window safely.\n      <button style={{ fontSize: 12 }} onClick={onClick}>\n        Terminate Program\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GitHubButton from \"./GitHubButton\";\nimport TerminateButton from \"./TerminateButton\";\n\ninterface Props {\n  version: string;\n}\n\nexport default function TopRow(props: Props): JSX.Element {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        margin: 3,\n      }}\n    >\n      <span>Version: {props.version}</span>\n      <GitHubButton />\n      <TerminateButton />\n    </div>\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function EditorHelp(props: Props): JSX.Element {\n  return (\n    <div\n      style={{\n        fontSize: 12,\n        marginTop: 10,\n        marginLeft: 10,\n      }}\n    >\n      <ul>\n        <li>Press Ctrl-I to show suggestions.</li>\n        <li>Press F1 to insert key.</li>\n        <li>Press F2 to save.</li>\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useTimeout } from \"react-use\";\n\ninterface Props {\n  delay: number;\n}\n\nexport default function DelayedNotRunning(props: Props): JSX.Element {\n  const [isReady] = useTimeout(props.delay);\n  if (isReady()) {\n    return (\n      <h2\n        style={{\n          position: \"absolute\",\n          color: \"red\",\n          width: \"100vw\",\n          height: \"100vh\",\n          backgroundColor: \"white\",\n        }}\n      >\n        Mouseable is not running.\n      </h2>\n    );\n  }\n\n  return <React.Fragment />;\n}\n","import React from \"react\";\nimport MyEditor from \"./components/MyEditor\";\nimport TopRow from \"./components/TopRow\";\nimport EditorHelp from \"./components/EditorHelp\";\nimport { useAsync, useAsyncFn, useInterval } from \"react-use\";\nimport DelayedNotRunning from \"./components/DelayedNotRunning\";\n\nfunction App() {\n  const versionState = useAsync(window.__getVersion__);\n  const [pingState, requestPing] = useAsyncFn(window.__ping__);\n  const schemaState = useAsync(window.__getSchema__);\n\n  useInterval(() => {\n    requestPing();\n  }, 2000);\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      {pingState.loading && <DelayedNotRunning delay={1000} />}\n      <TopRow version={versionState.value ?? \"\"} />\n      <EditorHelp />\n      {schemaState.value && <MyEditor schema={schemaState.value} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { isDev } from \"./gobind\";\nimport toast from \"react-simple-toasts\";\n\nif (isDev) {\n  console.log(\"DEV MODE\");\n}\n\nwindow.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"F1\" || e.key === \"F2\") {\n    e.preventDefault();\n    toast(\"Please focus on the editor. (Press Tab)\");\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}