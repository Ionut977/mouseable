{"version":3,"sources":["components/MyEditor.tsx","gobind.ts","components/GitHubButton.tsx","components/TerminateButton.tsx","components/TopRow.tsx","components/EditorHelp.tsx","components/TextButton.tsx","components/TMI.tsx","components/DelayedNotRunning.tsx","App.tsx","index.tsx"],"names":["MyEditor","props","height","options","wordWrap","formatOnPaste","formatOnType","minimap","enabled","stablePeek","suggest","insertMode","preview","language","value","onChange","onMount","editor","monaco","modelUri","Uri","parse","model","createModel","languages","json","jsonDefaults","setDiagnosticsOptions","validate","schemaValidation","schemas","uri","schema","JSON","fileMatch","toString","setModel","overrideServices","storageService","get","getNumber","getBoolean","key","remove","store","onDidChangeStorage","onWillSaveState","isDev","process","ping","a","console","log","window","__ping__","r","url","__openLink__","GitHubButton","style","background","border","margin","padding","display","flexDirection","alignItems","justifyContent","cursor","fontSize","onClick","openLink","alt","src","width","TerminateButton","__terminate__","then","close","TopRow","version","EditorHelp","marginTop","marginLeft","TextButton","textShadow","children","TMI","useState","isOpen","setIsOpen","b","DelayedNotRunning","useTimeout","delay","isReady","position","color","backgroundColor","Fragment","App","useAsyncFn","pingState","requestPing","jsonValue","setJsonValue","setEditor","useInterval","loading","addEventListener","e","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf17ba8c.chunk.js","sourcesContent":["import React from \"react\";\nimport Editor, { OnMount } from \"@monaco-editor/react\";\nimport { editor, Uri } from \"monaco-editor\";\n\ninterface Props {\n  value?: string;\n  onChange: (v?: string) => void;\n  onMount: (e: editor.IStandaloneCodeEditor) => void;\n  schema?: string;\n}\n\nexport default function MyEditor(props: Props): JSX.Element {\n  const onMount: OnMount = (editor, monaco) => {\n    const modelUri = monaco.Uri.parse(\"a://b/foo.json\");\n    const model = monaco.editor.createModel(\"\", \"json\", modelUri);\n    monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n      validate: true,\n      schemaValidation: \"error\",\n      schemas: [\n        {\n          uri: \"a://b/foo.json\",\n          schema: JSON.parse(props.schema ?? \"{}\"),\n          fileMatch: [modelUri.toString()],\n        },\n      ],\n    });\n    editor.setModel(model);\n    props.onMount(editor);\n  };\n\n  return (\n    <Editor\n      height=\"80vh\"\n      options={{\n        wordWrap: \"off\",\n        formatOnPaste: true,\n        formatOnType: true,\n        minimap: { enabled: false },\n        stablePeek: true,\n        suggest: {\n          insertMode: \"replace\",\n          preview: true,\n        },\n      }}\n      language=\"json\"\n      value={props.value}\n      onChange={props.onChange}\n      onMount={onMount}\n      overrideServices={{\n        storageService: {\n          get() {},\n          getNumber() {},\n          getBoolean(key: any) {\n            return key === \"expandSuggestionDocs\";\n          },\n          remove() {},\n          store() {},\n          onDidChangeStorage() {},\n          onWillSaveState() {},\n        },\n      }}\n    />\n  );\n}\n","declare global {\n  interface Window {\n    __ping__: () => Promise<number>;\n    __getVersion__: () => Promise<string>;\n    __getSchema__: () => Promise<string>;\n    __terminate__: () => Promise<void>;\n    __openLink__: (url: string) => Promise<void>;\n    __getConfigNames__: () => Promise<string[]>;\n    __getConfig__: (name: string) => Promise<string>;\n    __saveConfig__: (json: string) => Promise<void>;\n  }\n}\nconst isDev = process.env.NODE_ENV === \"development\";\nif (isDev) {\n  console.log(\"DEVELOPMENT MODE\");\n}\n\nexport async function ping(): Promise<boolean> {\n  console.log(\"ping\");\n  if (isDev) {\n    await new Promise((r) => {\n      setTimeout(r, 100);\n    });\n    return true;\n  }\n\n  const r = await window.__ping__();\n  console.log(r);\n  return !!r;\n}\n\nexport function terminate() {\n  console.log(\"terminate\");\n  if (isDev) {\n    window.close();\n    return;\n  }\n\n  window.__terminate__().then(window.close);\n  return;\n}\n\nexport async function getVersion(): Promise<string> {\n  console.log(\"getVersion\");\n  if (isDev) {\n    return \"d.e.v\";\n  }\n\n  const r = await window.__getVersion__();\n  console.log(r);\n  return r;\n}\n\nexport async function openLink(url: string): Promise<void> {\n  console.log(`openLink ${url}`);\n  if (isDev) {\n    return;\n  }\n\n  const r = await window.__openLink__(url);\n  console.log(r);\n  return r;\n}\n\nexport async function getConfigNames(): Promise<string[]> {\n  console.log(\"getConfigNames\");\n  if (isDev) {\n    return [\"config-1.json\", \"my-config.json\", \"your-config.json\"];\n  }\n\n  const r = await window.__getConfigNames__();\n  console.log(r);\n  return r;\n}\n\nexport async function getConfig(name: string): Promise<string> {\n  console.log(`getConfig ${name}`);\n  if (isDev) {\n    return `{\"text\":\"thsi is test\"}`;\n  }\n\n  const r = await window.__getConfig__(name);\n  console.log(r);\n  return r;\n}\n\nexport async function getSchema(): Promise<string> {\n  console.log(\"getSchema\");\n  if (isDev) {\n    return \"{}\";\n  }\n\n  const r = await window.__getSchema__();\n  console.log(r);\n  return r;\n}\n\nexport async function saveConfig(json: string): Promise<void> {\n  console.log(`saveConfig ${json}`);\n  if (isDev) {\n    return;\n  }\n\n  const r = await window.__saveConfig__(json);\n  console.log(r);\n  return r;\n}\n","import React from \"react\";\nimport { openLink } from \"../gobind\";\n\ninterface Props {}\n\nexport default function GitHubButton(props: Props): JSX.Element {\n  const onClick = () => {\n    openLink(\"https://github.com/wirekang/mouseable\");\n  };\n\n  return (\n    <a\n      style={{\n        background: \"none\",\n        border: \"none\",\n        margin: 0,\n        padding: 3,\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        cursor: \"pointer\",\n        fontSize: 13,\n      }}\n      onClick={onClick}\n    >\n      <span>GitHub </span>\n      <img alt=\"github\" src=\"github.png\" width={20} height={20} />\n    </a>\n  );\n}\n","import React from \"react\";\nimport { terminate } from \"../gobind\";\n\ninterface Props {}\n\nexport default function TerminateButton(props: Props): JSX.Element {\n  const onClick = () => {\n    terminate();\n  };\n  return (\n    <div style={{ fontSize: 10 }}>\n      You can close this window safely.\n      <button style={{ fontSize: 12 }} onClick={onClick}>\n        Terminate Program\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport GitHubButton from \"./GitHubButton\";\nimport TerminateButton from \"./TerminateButton\";\n\ninterface Props {\n  version: string;\n}\n\nexport default function TopRow(props: Props): JSX.Element {\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        margin: 3,\n      }}\n    >\n      <span>Version: {props.version}</span>\n      <GitHubButton />\n      <TerminateButton />\n    </div>\n  );\n}\n","import React from \"react\";\n\ninterface Props {}\n\nexport default function EditorHelp(props: Props): JSX.Element {\n  return (\n    <div\n      style={{\n        fontSize: 11,\n        marginTop: 10,\n        marginLeft: 10,\n      }}\n    >\n      <p>Press F1 to insert key.</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\ninterface Props {\n  onClick: () => void;\n  children: React.ReactText;\n  style?: React.CSSProperties;\n}\n\nexport default function TextButton(props: Props): JSX.Element {\n  return (\n    <span\n      style={{\n        cursor: \"pointer\",\n        textShadow: \"1px 1px 1px #ddd\",\n        ...props.style,\n      }}\n      onClick={props.onClick}\n    >\n      {props.children}\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport TextButton from \"./TextButton\";\n\ninterface Props {}\n\nexport default function TMI(props: Props): JSX.Element {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div>\n      <TextButton\n        style={{ fontSize: 12 }}\n        onClick={() => {\n          setIsOpen((b) => !b);\n        }}\n      >\n        TooMuchInformation\n      </TextButton>\n      {isOpen && <p>Thank you!!</p>}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useTimeout } from \"react-use\";\n\ninterface Props {\n  delay: number;\n}\n\nexport default function DelayedNotRunning(props: Props): JSX.Element {\n  const [isReady] = useTimeout(props.delay);\n  if (isReady()) {\n    return (\n      <h2\n        style={{\n          position: \"absolute\",\n          color: \"red\",\n          width: \"100wh\",\n          height: \"100vh\",\n          backgroundColor: \"white\",\n        }}\n      >\n        Mouseable is not running.\n      </h2>\n    );\n  }\n\n  return <React.Fragment />;\n}\n","import React, { useEffect, useState } from \"react\";\nimport MyEditor from \"./components/MyEditor\";\nimport TopRow from \"./components/TopRow\";\nimport { editor } from \"monaco-editor\";\nimport EditorHelp from \"./components/EditorHelp\";\nimport TMI from \"./components/TMI\";\nimport { useAsyncFn, useInterval } from \"react-use\";\nimport { ping } from \"./gobind\";\nimport DelayedNotRunning from \"./components/DelayedNotRunning\";\n\nfunction App() {\n  const [pingState, requestPing] = useAsyncFn(ping);\n  const [jsonValue, setJsonValue] = useState<string>();\n  const [editor, setEditor] = useState<editor.IStandaloneCodeEditor | null>(null);\n\n  useInterval(() => {\n    requestPing();\n  }, 2000);\n\n  return (\n    <div style={{ height: \"100%\" }}>\n      {pingState.loading && <DelayedNotRunning delay={1000} />}\n      <TopRow version={\"\"} />\n      <EditorHelp />\n      <MyEditor value={jsonValue} onChange={setJsonValue} onMount={setEditor} schema={\"{}\"} />\n      <TMI />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nwindow.addEventListener(\"keydown\", (e) => {\n  if (e.key === \"F1\") {\n    e.preventDefault();\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}